主要使用的方法有
(1)async.series([task],cb)：
顺序发起任务列表，但任务的结束时间不确定，执行结果按照顺序保存在数组中

(2)async.waterfall([task],cb)：
后一个任务是前一个任务的回调函数，会接收前一个任务传来的参数，cb只接收最后一个任务传的参数

(3)async.parallel([task],cb):
多个任务同时执行，不会等待上一个任务调用cb，所有任务执行完后，返回结果

(4)async.parallelLimit([task],limit,cb):
多个任务同时执行，可以限制并发量，有任务执行cb后，就释放一个资格，开始执行下一个任务

(5)async.auto({taskList},cb)
定义好任务之间的依赖关系，由系统决定执行waterfall或parallel方法，后执行的任务会接收所有已执行任务cb的结果

(6)async.forever(task,cb)
无限循环，出现错误才会停止，执行cb就开始执行下一次循环

(7)async.compose(task3,task2,task1(a,b)),compose(a,b,cb):
类似async.waterfall，逆序执行

(8)async.eachSeries([dataArray],function(data,cb){},cb)
对数组中的数据串行执行函数

(9)async.map([dataArray],function(data,cb){},cb)
对数组中的数据并行执行函数

理解：以async.waterfall为例
async中[task]的函数数组中的函数执行时，约定
第一个参数为err，某个函数如果传了这个值，就直接跳转到cb中
每个函数的最后一个参数为callback，即为回调函数，执行这个回调函数进入到下一个函数
举例：
[functionA(cb){执行cb(null,1)跳转到functionB；执行cb(err)，直接跳转到functionC，不再执行functionB；如果执行cb()不传参，functionB的cb会被赋值为空，报错},
functionB(data,cb){cb(null,data)}],
functionC(err,data){}