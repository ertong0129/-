1.CMS收集器：以获取最短回收停顿时间为目标的收集器
老年代收集器
多线程收集器
基于标记-清除算法，分为4个步骤
（1）初始标记（需要暂停工作线程，但仅是标记一下GC Roots能直接关联到的对象，速度很快）
（2）并发标记（可以和工作线程一起运行，GC Roots Tracing的过程）
（3）重新标记（需要暂停工作线程，修正并发标记期间因用户程序继续运作而导致标记变动的记录）
（4）并发清除（可以和工作线程一起运行，回收内存）

缺点：
1.对CPU资源敏感。
不会导致用户线程停顿，但是会因为占用线程导致程序变慢。
默认线程数是（3+CPU数量）/4，CPU数量少于4时，影响较大

2.无法处理浮动垃圾
由于CMS并发清理阶段用户线程还在运行，在这段时间内产生的垃圾由于没有被标记过所以CMS无法清理掉
因为清理的过程中工作线程还要运行，所以需要预留一部分内存空间给工作线程使用。
当预留的内存不够（新产生的垃圾塞满了），就会出现"Concurrent Mode Failure"失败，虚拟机会启动后备预案，临时启用Serial Old重新进行老年代收集

3.基于标记-清除算法，会有大量空间碎片产生

参数说明：
-XX:CMSInitiatingOccupancyFraction：
内存使用率超过百分比时就会触发垃圾回收，在jdk1.6中默认为92

-XX:+UseCMSCompactAtFullCollection
默认开启的，在CMS收集器顶不住要进行FullGC时开启内存碎片的合并整理过程（内存整理是无法并发的），空间碎片问题没了，但停顿时间增长

-XX:CMSFullGCsBeforeCompaction：
在执行多少次不整理的FullGC后，执行一次整理的，默认为0，即每次FullGC都进行碎片整理


