G1收集器：
新、老年代都能用
多线程收集器
基于标记-整理算法
（1）初始标记需要暂停工作线程，但仅是标记一下GC Roots能直接关联到的对象，速度很快）
（2）并发标记（可以和工作线程一起运行，GC Roots Tracing的过程）
（3）最终标记（需要暂停工作线程，修正并发标记期间因用户程序继续运作而导致标记变动的记录）
（4）筛选回收（可以和工作线程一起运行，但停顿用户线程将大幅提高回收效率，对各个Region的回收价值和成本进行排序，根据用户期望的停顿时间来制定回收计划）

使用G1收集器时，java堆的内存布局划分为多个大小相等的Region，新生代和老年代不再是物理隔离的了，他们都是一部分Region的集合

参考文章
https://www.jianshu.com/p/9f3d62433f6f

参数说明：
-XX:+UseG1GC
开启G1收集器

-XX:G1HeapRegionSize=n
指定分区大小(1~32MB，且必须是2的幂)

-XX:G1NewSizePercent
年轻代占比，默认5%

-XX:G1MaxNewSizePercent
年轻代最大占比，默认60%

-XX:MaxGCPauseMillis
最大暂停时间，软限制（不一定能达到），默认200ms

-XX:InitiatingHeapOccupancyPercent=45
启动并发GC时的堆内存占用百分比，G1用它来触发并发GC周期,基于整个堆的使用率,而不只是某一代内存的使用比例。
值为 0 则表示“一直执行GC循环)'. 默认值为 45

-XX:ParallelGCThreads=n
设置垃圾收集器在并行阶段使用的线程数,默认值随JVM运行的平台不同而不同

-XX:ConcGCThreads=n
并发垃圾收集器使用的线程数量. 默认值随JVM运行的平台不同而不同.

ps：不要显式的指定年轻代（-Xmn）的大小，会影响到G1的默认行为，G1会根据GC时间自动变更年轻代大小
