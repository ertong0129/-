节省创建线程、结束线程的开销
使用Executors的静态方法创建线程池
线程池参数：
corePoolSize：核心池大小，在这个大小内的线程不会被删除
maximumPoolSize：最大线程数量，每次有新任务来就可能会开一个线程来执行，这个参数控制线程池中最大的线程数量
keepAliveTime：线程最大空闲生存时间
TimeUnit：时间单位
BlockingQueue<Runnable>：任务的阻塞队列（线程都在忙的时候，提交的任务会放到阻塞队列中）
ThreadFactory：线程工厂
RejectedExecutionHandler：拒绝策略，任务队列满的时候，怎样拒绝新的任务提交
默认拒绝策略为AbortPolicy
AbortPolicy:丢弃任务并抛出RejectedExecutionException异常
DiscardPolicy：丢弃任务，但是不抛出异常（静默丢弃）
DiscardOldestPolicy：丢弃队列最前面的任务，然后重新提交被拒绝的任务
CallerRunsPolicy：由调用线程处理该任务

1.固定大小的线程池
ExecutorService fixedPool = Executors.newFixedThreadPool(1);

2.缓冲池
ExecutorService cachePool = Executors.newCachedThreadPool();

3.只有一个线程的线程池
ExecutorService singlePool = Executors.newSingleThreadExecutor();

4.执行定时任务的线程池
ExecutorService schedulePool = Executors.newScheduledThreadPool(1);

5.自定义一个线程池
ExecutorService myPool = new ThreadPoolExecutor(5, 50, 60, TimeUnit.SECONDS, new SynchronousQueue<Runnable>());

线程池提交任务，Runnable和Callable都可以
Runnable：mypool.execute()
Callable：mypool.submit()